// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Rendre nullable pour l'utilisateur anonyme
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // Pour l'auth par email/password
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  links    Link[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Link {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  originalUrl String   @map("original_url") @db.Text
  shortCode   String   @unique @map("short_code")
  customAlias String?  @map("custom_alias")
  title       String?
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks Click[]

  @@index([userId])
  @@index([shortCode])
  @@map("links")
}

model Click {
  id        String   @id @default(cuid())
  linkId    String   @map("link_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent") @db.Text
  referer   String?  @db.Text
  country   String?
  region    String?
  city      String?
  device    String?
  browser   String?
  os        String?
  clickedAt DateTime @default(now()) @map("clicked_at")

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
  @@index([clickedAt])
  @@index([country])
  @@map("clicks")
}

enum Plan {
  FREE
  PREMIUM
  ENTERPRISE
}